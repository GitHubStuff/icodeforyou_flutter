# pubspec.yaml icodeforyou_flutter
name: icodeforyou_flutter
publish_to: none
description: Collection of flutter packages

workspace:
  - packages/abstractions
  - packages/analog_clock_widget
  - packages/animated_checkbox_widget
  - packages/extensions
  - packages/nosql
  - packages/theme_manager
  - packages/widgetbook_workspace

environment:
  sdk: ">=3.9.0"

dependency_overrides:
  accessibility_tools: ^2.6.0

dev_dependencies:
  melos: ^7.1.0

melos:
  scripts:
    # Existing scripts...
    analyze:
      run: dart analyze .

    analyze_all:
      description: Analyze all packages
      exec: dart analyze .

    # Build all packages that have build_runner
    build:
      description: Run build_runner in packages that need it
      exec: dart run build_runner build --delete-conflicting-outputs
      packageFilters:
        dependsOn: "build_runner"


    coverage_clean:
      description: Clean all coverage data from workspace
      run: |
        rm -rf coverage/
        find . -name "coverage" -type d -not -path "./coverage" -exec rm -rf {} +
        echo "🧹 Coverage data cleaned from entire workspace"

    # Merge all the coverage tests
    coverage_merge:
      description: Merge coverage reports from all workspace packages
      run: |
        mkdir -p coverage
        rm -f coverage/lcov.info
        
        # Find all coverage files in the entire workspace dynamically
        coverage_files=$(find . -path "./coverage" -prune -o -name "lcov.info" -path "*/coverage/lcov.info" -print)
        
        if [ -n "$coverage_files" ]; then
          echo "Found coverage files:"
          echo "$coverage_files"
          
          # Process each coverage file
          for lcov_file in $coverage_files; do
            # Extract the package path: ./packages/extensions/coverage/lcov.info -> packages/extensions
            package_path=$(echo "$lcov_file" | sed 's|^\./||' | sed 's|/coverage/lcov\.info$||')
            package_dir=$(dirname "$package_path")
            package_name=$(basename "$package_path")
            
            echo "Processing coverage for $package_dir/$package_name..."
            
            # Create a temporary file with corrected paths
            temp_file="coverage/temp_${package_dir//\//_}_${package_name}.info"
            sed "s|SF:lib/|SF:${package_path}/lib/|g" "$lcov_file" > "$temp_file"
            
            # Add to the main coverage file
            if [ -f coverage/lcov.info ]; then
              lcov --add-tracefile coverage/lcov.info --add-tracefile "$temp_file" -o coverage/lcov.info
            else
              cp "$temp_file" coverage/lcov.info
            fi
            
            # Clean up temp file
            rm "$temp_file"
          done
          
          # Generate HTML report
          genhtml coverage/lcov.info -o coverage/html --ignore-errors source
          echo "✅ Merged coverage report: coverage/html/index.html"
          
          if [ -f coverage/html/index.html ]; then
            open coverage/html/index.html
          else
            echo "⚠️  HTML file wasn't created"
            lcov --summary coverage/lcov.info
          fi
        else
          echo "❌ No coverage files found. Run 'melos run test_coverage' first."
        fi


    list_packages:
      description: List all packages in workspace
      run: |
        echo "📦 Workspace packages:"
        find . -name "pubspec.yaml" -not -path "./pubspec.yaml" -exec dirname {} \; | sort

    test_nosql_cleanup:
      description: Cleans up /tmp files created by NoSql package tests
      run: |
        echo "🛀 Clean /tmp files created by nosql_ce_box_test.dart and nosql_ce_db_test.dart"
        ./packages/nosql/test/nosql_cleanup

    test_all:
      description: Run tests in all packages sequentially to avoid Flutter lock conflicts
      run: |
        echo "🧪 Running tests sequentially to avoid Flutter lock conflicts..."
    
        # Track failed packages
        failed_packages=""
        ignored_packages=0
        total_packages=0
        tested_packages=0
    
        # Find packages with test directories
        for package_dir in packages/*/; do
          package_name=$(basename "$package_dir")

          if [ "$package_name" = "widgetbook_workspace" ]; then
            echo "🤡 Skipping $package_name (excluded from tests)"
            total_packages=$((total_packages + 1))
            ignored_packages=$((ignored_packages + 1))
            continue
          fi
          if [ -d "${package_dir}test" ]; then
            package_name=$(basename "$package_dir")
            echo ""
            echo "📦 Testing $package_name..."
            cd "$package_dir"
            total_packages=$((total_packages + 1))
            tested_packages=$((tested_packages + 1))
        
            if ! flutter test; then
              echo "❌  Tests failed in $package_name"
              if [ -z "$failed_packages" ]; then
                failed_packages="$package_name"
              else
                failed_packages="$failed_packages, $package_name"
              fi
            fi
            cd - > /dev/null
          else
            package_name=$(basename "$package_dir")
            echo "⏭️  Skipping $package_name (no test directory)"
            total_packages=$((total_packages + 1))
          fi
        done
    
        echo ""
        echo "✅ Test run completed!"
        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📊 SUMMARY"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "Total packages: $total_packages"
        echo "Tested packages: $tested_packages"
        echo "Ignored packages: $ignored_packages"
    
        if [ -n "$failed_packages" ]; then
          echo "❌ FAILED: $failed_packages"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          exit 1
        else
          echo "✅ All tests passed!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        fi
    test_coverage:
      description: Run tests with coverage in all packges (auto-detects Flutter vs Dart)
      run: |
        echo "🧪 Running coverage tests with auto-detection..."
        for package_dir in packages/*/; do
          package_name=$(basename "$package_dir")

          if [ "$package_name" = "widgetbook_workspace" ]; then
            echo "🤡 Skipping $package_name (excluded from tests)"
            total_packages=$((total_packages + 1))
            continue
          fi

          if [ -d "${package_dir}test" ]; then
            package_name=$(basename "$package_dir")
            echo ""
            echo "📦 Testing $package_name..."
            cd "$package_dir"

            if grep -q "flutter:" pubspec.yaml; then
              echo "🦋 Flutter package detected - using flutter test"
              flutter test --coverage
            else
              echo "🎯 Dart package detected - using dart test"
              dart test --coverage=coverage
            fi
            cd - > /dev/null
          fi
        done
        echo "✅ Coverage generation completed for all packages!"
        
    # Run widgetbook
    widgetbook:
      description: Run widgetbook for development
      run: |
        cd packages/widgetbook_workspace
        flutter run -d chrome
    
    # Build runner specifically for widgetbook
    widgetbook_build:
      description: Build widgetbook components
      run: |
        cd packages/widgetbook_workspace
        dart run build_runner build --delete-conflicting-outputs
        echo "✅ Widgetbook build completed"
    
    # Clean widgetbook generated files
    widgetbook_clean:
      description: Clean widgetbook generated files
      run: |
        cd packages/widgetbook_workspace
        dart run build_runner clean
        echo "🧹 Widgetbook generated files cleaned"



flutter:
  uses-material-design: true
